/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.svenbuhre.hexagonal.adapter.in.api;

import de.svenbuhre.hexagonal.adapter.in.models.CertificateDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-26T10:36:55.192017200+02:00[Europe/Berlin]")
@Validated
public interface CertificatesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /certificates : Download the certificate for the current user
     *
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/certificates",
        produces = { "application/binary" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> downloadCertificate(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/{username}/certificate : Upload a new certificate for the specified user
     *
     * @param username the name of the user (required)
     * @param file  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{username}/certificate",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<CertificateDto> uploadCertificate(
         @PathVariable("username") String username,
         @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"filename\" : \"filename\", \"fileSize\" : 0, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
